from flask import Flask, request, send_file
import os
import ctypes
import pyautogui
import cv2
import psutil
import subprocess
import keyboard
import threading

app = Flask(__name__)

# –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç
@app.route("/screenshot", methods=["POST"])
def screenshot():
    screenshot_path = "screenshot.png"
    pyautogui.screenshot(screenshot_path)
    return send_file(screenshot_path, mimetype="image/png")

# –§–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã
@app.route("/webcam", methods=["POST"])
def webcam():
    cap = cv2.VideoCapture(0)
    ret, frame = cap.read()
    if ret:
        photo_path = "webcam.jpg"
        cv2.imwrite(photo_path, frame)
        cap.release()
        return send_file(photo_path, mimetype="image/jpeg")
    return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ", 500

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è "S" –∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–Ω–∞
def wait_for_wake_key():
    keyboard.wait("s")  # –û–∂–∏–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è "S"
    ctypes.windll.user32.mouse_event(1, 0, 0, 0, 0)  # –í–∫–ª—é—á–∞–µ–º –º—ã—à—å
    keyboard.unhook_all()  # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∞–≤–∏—à–∏
    for proc in psutil.process_iter():
        try:
            if proc.name() in ["chrome.exe", "discord.exe", "steam.exe"]:
                proc.resume()
        except psutil.NoSuchProcess:
            pass
    print("–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")

# –ü–µ—Ä–µ–≤–æ–¥ –ü–ö –≤ —Ä–µ–∂–∏–º —Å–Ω–∞
@app.route("/sleep", methods=["POST"])
def sleep():
    ctypes.windll.user32.SendMessageW(0xFFFF, 0x0112, 0xF170, 2)  # –û—Ç–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω
    keyboard.block_key("ctrl")
    keyboard.block_key("alt")
    keyboard.block_key("delete")
    keyboard.block_key("win")
    keyboard.block_key("s")  # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∞–≤–∏—à—É "S", —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è

    os.system("powercfg -h on")  # –í–∫–ª—é—á–∞–µ–º –≥–∏–±–µ—Ä–Ω–∞—Ü–∏—é
    os.system("rundll32.exe powrprof.dll,SetSuspendState Hibernate")  # –°–æ–Ω

    threading.Thread(target=wait_for_wake_key, daemon=True).start()  # –ñ–¥–µ–º "S" –≤ —Ñ–æ–Ω–µ
    return "üí§ –ü–ö –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —ç–∫–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º."

# –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Wake-on-LAN
@app.route("/wake", methods=["POST"])
def wake():
    mac_address = "1C-CE-51-45-E3-10"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ MAC-–∞–¥—Ä–µ—Å —Å–≤–æ–µ–≥–æ –ü–ö
    subprocess.run(["wakeonlan", mac_address])  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Wake-on-LAN —Å–∏–≥–Ω–∞–ª
    return "‚úÖ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CPU –∏ RAM
@app.route("/status", methods=["GET"])
def status():
    cpu_usage = psutil.cpu_percent(interval=1)
    ram_usage = psutil.virtual_memory().percent
    return f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\nüíæ CPU: {cpu_usage}%\nüñ• RAM: {ram_usage}%"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
